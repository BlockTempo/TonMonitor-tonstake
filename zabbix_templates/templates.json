{
    "zabbix_export": {
        "version": "6.0",
        "date": "2022-09-09T00:48:22Z",
        "groups": [
            {
                "uuid": "a571c0d144b14fd4a87a9d9b2aa9fcd6",
                "name": "Templates/Applications"
            },
            {
                "uuid": "94a7b82e51744de2990fab38cc2b157d",
                "name": "TON"
            }
        ],
        "templates": [
            {
                "uuid": "200b2f8d1c2a4023a2f88c98f8b62015",
                "template": "TON Blockchain",
                "name": "TON Blockchain",
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "4eaf7ef924bf4cedafb361c26470f044",
                        "name": "Election proposals count",
                        "type": "EXTERNAL",
                        "key": "check_proposals.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\"]",
                        "delay": "1h",
                        "trends": "730d",
                        "units": "Proposals"
                    },
                    {
                        "uuid": "9056917731f84d1cae8c893db09ecbff",
                        "name": "Configuration account seqno",
                        "type": "EXTERNAL",
                        "key": "get_account_seqno.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",{$CONFIG.ACCOUNT.ADDRESS}]",
                        "delay": "1h",
                        "trends": "730d"
                    },
                    {
                        "uuid": "71ce8851de004220a6f40104c6ef6572",
                        "name": "Consensus block age",
                        "type": "EXTERNAL",
                        "key": "get_blockchain_consensus.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"age\",\"--verbosity\",\"0\"]",
                        "delay": "10s",
                        "trends": "730d",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "2638fddf9ef741c688b28d362f5322e3",
                        "name": "Consensus block height",
                        "type": "EXTERNAL",
                        "key": "get_blockchain_consensus.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"block\",\"--verbosity\",\"0\"]",
                        "delay": "10s",
                        "trends": "730d"
                    },
                    {
                        "uuid": "283b8ccb842f4e85a33de914b81376a1",
                        "name": "Consensus block rate",
                        "type": "EXTERNAL",
                        "key": "get_blockchain_consensus.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"rate\",\"--verbosity\",\"0\"]",
                        "delay": "10s",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "Bps"
                    },
                    {
                        "uuid": "1821577f5d93435e92ac9195c423dae0",
                        "name": "Masterchain average fees per block",
                        "type": "EXTERNAL",
                        "key": "get_blocks_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--metric\",\"fee_load\",\"--info\",\"avg\",\"--period\",\"120\"]",
                        "delay": "2m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "TON"
                    },
                    {
                        "uuid": "08fc762a1f774e15b1389d0f8291da82",
                        "name": "Masterchain average gas per block",
                        "type": "EXTERNAL",
                        "key": "get_blocks_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--metric\",\"gas_load\",\"--info\",\"avg\",\"--period\",\"120\"]",
                        "delay": "2m",
                        "trends": "730d",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "c75db099bc284beb83bf5524167653f4",
                        "name": "Masterchain average transactions per block",
                        "type": "EXTERNAL",
                        "key": "get_blocks_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--metric\",\"transactions_load\",\"--info\",\"avg\",\"--period\",\"120\"]",
                        "delay": "2m",
                        "trends": "730d",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "caed4347170744898b175dc80b66bc0a",
                        "name": "Workchain average fees per block",
                        "type": "EXTERNAL",
                        "key": "get_blocks_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--metric\",\"fee_load\",\"--info\",\"avg\",\"--period\",\"120\"]",
                        "delay": "2m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "TON"
                    },
                    {
                        "uuid": "cdb5efe5a4044b5e95e6e63af44e3e51",
                        "name": "Workchain average gas per block",
                        "type": "EXTERNAL",
                        "key": "get_blocks_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--metric\",\"gas_load\",\"--info\",\"avg\",\"--period\",\"120\"]",
                        "delay": "2m",
                        "trends": "730d",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "6a7ee620d90f4273bb92c3a8e3889563",
                        "name": "Workchain average transactions per block",
                        "type": "EXTERNAL",
                        "key": "get_blocks_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--metric\",\"transactions_load\",\"--info\",\"avg\",\"--period\",\"120\"]",
                        "delay": "2m",
                        "trends": "730d",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "8689b3748b424b7fb95c49bdb286bff4",
                        "name": "Masterchain transaction count",
                        "type": "EXTERNAL",
                        "key": "get_transactions_count_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--info\",\"count\",\"--workchain\",\"-1\",\"--period\",\"60\"]",
                        "trends": "730d"
                    },
                    {
                        "uuid": "62522cdfca784581b86e43dc26f7f5b6",
                        "name": "Workchain transaction count",
                        "type": "EXTERNAL",
                        "key": "get_transactions_count_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--info\",\"count\",\"--workchain\",\"0\",\"--period\",\"60\"]",
                        "trends": "730d"
                    },
                    {
                        "uuid": "96ca4017d091404bb7dcefe42fc601cd",
                        "name": "Masterchain transaction rate",
                        "type": "EXTERNAL",
                        "key": "get_transactions_count_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--info\",\"rate\",\"--workchain\",\"-1\",\"--period\",\"60\"]",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "tps"
                    },
                    {
                        "uuid": "3309f4d3bc454078acfe0f17f585f17a",
                        "name": "Workchain transaction rate",
                        "type": "EXTERNAL",
                        "key": "get_transactions_count_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--info\",\"rate\",\"--workchain\",\"0\",\"--period\",\"60\"]",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "tps"
                    },
                    {
                        "uuid": "9ae7b6780d864f4eb8982d7ee94907d4",
                        "name": "Masterchain transactions compute exit code >1 percentage",
                        "type": "EXTERNAL",
                        "key": "get_transactions_exit_code_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--codes\",\"2:9999\",\"--info\",\"percentage\",\"--period\",\"300\"]",
                        "delay": "5m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "%"
                    },
                    {
                        "uuid": "68e53f257dd24df4be1cd5565eb4a31f",
                        "name": "Workchain transactions compute exit code >1 percentage",
                        "type": "EXTERNAL",
                        "key": "get_transactions_exit_code_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--codes\",\"2:9999\",\"--info\",\"percentage\",\"--period\",\"300\"]",
                        "delay": "5m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "%"
                    },
                    {
                        "uuid": "d5b93a9ed9f643f9a1c71a1eda513cac",
                        "name": "Masterchain average gas per transaction usage",
                        "type": "EXTERNAL",
                        "key": "get_transactions_gas_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--metric\",\"gas_usage\",\"--info\",\"avg\",\"--filter\",\"skip_trans_tick_tock,skip_compute_skipped\",\"--period\",\"60\"]",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "gpt",
                        "description": "This metric does not take into account tick_tock transactions"
                    },
                    {
                        "uuid": "f05f9dfdc81a494495084a6d4dbdf741",
                        "name": "Workchain average gas per transaction usage",
                        "type": "EXTERNAL",
                        "key": "get_transactions_gas_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--metric\",\"gas_usage\",\"--info\",\"avg\",\"--filter\",\"skip_trans_tick_tock,skip_compute_skipped\",\"--period\",\"60\"]",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "gpt",
                        "description": "This metric does not take into account tick_tock transactions"
                    },
                    {
                        "uuid": "d8f066f0c53a44f8ba55d6270d438e92",
                        "name": "Masterchain 5m volume without elector",
                        "type": "EXTERNAL",
                        "key": "get_transactions_path_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--info\",\"sum\",\"--filter\",\"skip_elector_contract,skip_compute_skipped\",\"--option\",\"nanoton_to_ton\",\"--period\",\"300\",\"in_msg.value\"]",
                        "delay": "5m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "TON"
                    },
                    {
                        "uuid": "71992cb76c484733bb48a416d3e3265c",
                        "name": "Masterchain 5m fees",
                        "type": "EXTERNAL",
                        "key": "get_transactions_path_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--info\",\"sum\",\"--filter\",\"skip_trans_tick_tock,skip_compute_skipped\",\"--period\",\"300\",\"--option\",\"nanoton_to_ton\",\"fee\"]",
                        "delay": "5m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "TON"
                    },
                    {
                        "uuid": "a4a44176e3134395a6bf4f62e4a3b26a",
                        "name": "Workchain 5m volume without elector",
                        "type": "EXTERNAL",
                        "key": "get_transactions_path_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--info\",\"sum\",\"--filter\",\"skip_elector_contract,skip_compute_skipped\",\"--option\",\"nanoton_to_ton\",\"--period\",\"300\",\"in_msg.value\"]",
                        "delay": "5m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "TON"
                    },
                    {
                        "uuid": "b20f12957ac640b5ae90613395b778a7",
                        "name": "Workchain 5m fees",
                        "type": "EXTERNAL",
                        "key": "get_transactions_path_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--info\",\"sum\",\"--filter\",\"skip_trans_tick_tock,skip_compute_skipped\",\"--period\",\"300\",\"--option\",\"nanoton_to_ton\",\"fee\"]",
                        "delay": "5m",
                        "trends": "730d",
                        "value_type": "FLOAT",
                        "units": "TON"
                    },
                    {
                        "uuid": "f2f0e8abe171429a9c62213e3d69480a",
                        "name": "Masterchain cskip_bad_state transactions count",
                        "type": "EXTERNAL",
                        "key": "get_transactions_skip_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--metric\",\"cskip_bad_state\",\"--info\",\"sum\",\"--period\",\"300\"]",
                        "delay": "5m",
                        "trends": "730d"
                    },
                    {
                        "uuid": "2a66ec10d88f424d974f7759130614d7",
                        "name": "Masterchain cskip_no_gas transactions count",
                        "type": "EXTERNAL",
                        "key": "get_transactions_skip_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"-1\",\"--metric\",\"cskip_no_gas\",\"--info\",\"sum\",\"--period\",\"300\"]",
                        "delay": "5m",
                        "trends": "730d"
                    },
                    {
                        "uuid": "e646c69134f44fdb888dc7e9980a2982",
                        "name": "Workchain cskip_bad_state transactions count",
                        "type": "EXTERNAL",
                        "key": "get_transactions_skip_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--metric\",\"cskip_bad_state\",\"--info\",\"sum\",\"--period\",\"300\"]",
                        "delay": "5m",
                        "trends": "730d"
                    },
                    {
                        "uuid": "8ae90541a76a438992f9e6cb2c35658a",
                        "name": "Workchain cskip_no_gas transactions count",
                        "type": "EXTERNAL",
                        "key": "get_transactions_skip_stats.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"--workchain\",\"0\",\"--metric\",\"cskip_no_gas\",\"--info\",\"sum\",\"--period\",\"300\"]",
                        "delay": "5m",
                        "trends": "730d"
                    },
                    {
                        "uuid": "58fe2b1e434c49d7875a23471ed1f988",
                        "name": "Validators average hourly efficiency",
                        "type": "EXTERNAL",
                        "key": "get_validators_load_stats.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--metric\",\"efficiency\",\"--info\",\"avg\"]",
                        "delay": "5m",
                        "value_type": "FLOAT",
                        "units": "%"
                    },
                    {
                        "uuid": "884f9fba39d9407ca8f8dcab79acdb64",
                        "name": "Validators online percentage",
                        "type": "EXTERNAL",
                        "key": "get_validators_load_stats.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--metric\",\"online\",\"--info\",\"percentage\"]",
                        "delay": "5m",
                        "value_type": "FLOAT",
                        "units": "%"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$CONFIG.ACCOUNT.ADDRESS}",
                        "value": "Ef9VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVbxn"
                    },
                    {
                        "macro": "{$CONFIG.FILE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.HOUR}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.MAXAGE}",
                        "value": "300"
                    }
                ]
            },
            {
                "uuid": "156006b44ccc45188e9f377d9fe19f19",
                "template": "TON HTTPS Service",
                "name": "TON HTTPS Service",
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "00ed496917f74d368ef27c50c40e1553",
                        "name": "HTTPS service is running",
                        "type": "SIMPLE",
                        "key": "net.tcp.service[https,{$HTTPS.CONN}]",
                        "delay": "10s",
                        "history": "1w",
                        "valuemap": {
                            "name": "Service state"
                        },
                        "tags": [
                            {
                                "tag": "Application",
                                "value": "HTTPS service"
                            }
                        ],
                        "triggers": [
                            {
                                "uuid": "b30dabddf6e141319f6d5c22428f7e74",
                                "expression": "max(/TON HTTPS Service/net.tcp.service[https,{$HTTPS.CONN}],#3)=0",
                                "name": "HTTPS service is down",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "HTTPS service is down for {$ESCALATION.TIMEOUT}",
                                        "expression": "max(/TON HTTPS Service/net.tcp.service[https,{$HTTPS.CONN}],{$ESCALATION.TIMEOUT})=0"
                                    }
                                ]
                            },
                            {
                                "uuid": "7d6bb350f2f74721abba881e93c417a9",
                                "expression": "max(/TON HTTPS Service/net.tcp.service[https,{$HTTPS.CONN}],{$ESCALATION.TIMEOUT})=0",
                                "name": "HTTPS service is down for {$ESCALATION.TIMEOUT}",
                                "priority": "HIGH"
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$ESCALATION.TIMEOUT}",
                        "value": "2m"
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "aa47f0347678403686317df06a3dabac",
                        "name": "Service state",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "Down"
                            },
                            {
                                "value": "1",
                                "newvalue": "Up"
                            }
                        ]
                    }
                ]
            },
            {
                "uuid": "e73a5cc2999142d991f80bdf2d8dec5e",
                "template": "TON Node by lite-client",
                "name": "TON Node by lite-client",
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "0cc860764f4b4a30bb9ddfa42695d455",
                        "name": "Lite server sync status",
                        "type": "EXTERNAL",
                        "key": "check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"]",
                        "delay": "15s",
                        "units": "seconds",
                        "triggers": [
                            {
                                "uuid": "6c6e82f41e23433c85f645948f48de23",
                                "expression": "min(/TON Node by lite-client/check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"],{$ESCALATION.TIMEOUT} )>{$LS.SYNC.HIGH.THRESHOLD}",
                                "name": "Lite server sync above {$LS.SYNC.HIGH.THRESHOLD}sec for {$ESCALATION.TIMEOUT}",
                                "priority": "AVERAGE",
                                "dependencies": [
                                    {
                                        "name": "Lite server not responding for {$ESCALATION.TIMEOUT}",
                                        "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],{$ESCALATION.TIMEOUT})=0"
                                    }
                                ]
                            },
                            {
                                "uuid": "5259444c9ff241de8c90293771a20ec4",
                                "expression": "min(/TON Node by lite-client/check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"],#4)>{$LS.SYNC.LOW.THRESHOLD}",
                                "name": "Lite server sync above {$LS.SYNC.LOW.THRESHOLD}sec",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Lite server not responding",
                                        "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],#2)=0"
                                    },
                                    {
                                        "name": "Lite server sync above {$LS.SYNC.HIGH.THRESHOLD}sec for {$ESCALATION.TIMEOUT}",
                                        "expression": "min(/TON Node by lite-client/check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"],{$ESCALATION.TIMEOUT} )>{$LS.SYNC.HIGH.THRESHOLD}"
                                    }
                                ]
                            },
                            {
                                "uuid": "ecb3d625f71645f6be68633378f6f562",
                                "expression": "nodata(/TON Node by lite-client/check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"],60)=1",
                                "name": "Lite server sync no data",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Lite server not responding",
                                        "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],#2)=0"
                                    },
                                    {
                                        "name": "Lite server sync no data for {$ESCALATION.TIMEOUT}",
                                        "expression": "nodata(/TON Node by lite-client/check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"],{$ESCALATION.TIMEOUT})=1"
                                    }
                                ]
                            },
                            {
                                "uuid": "1e7244cf576a465484ce0847554ae8f9",
                                "expression": "nodata(/TON Node by lite-client/check_ls_sync.py[\"--config\",\"{$CONFIG.FILE}\",\"--addr\",\"{HOST.CONN}:{$LS.PORT}\", \"--b64\",\"{$LS.KEY}\"],{$ESCALATION.TIMEOUT})=1",
                                "name": "Lite server sync no data for {$ESCALATION.TIMEOUT}",
                                "priority": "AVERAGE",
                                "dependencies": [
                                    {
                                        "name": "Lite server not responding for {$ESCALATION.TIMEOUT}",
                                        "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],{$ESCALATION.TIMEOUT})=0"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "0c1c4958efe749d1bcf354710519fa5d",
                        "name": "Lite server port open",
                        "type": "SIMPLE",
                        "key": "net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}]",
                        "delay": "15s",
                        "valuemap": {
                            "name": "YesNo"
                        },
                        "triggers": [
                            {
                                "uuid": "0b0e345b03444d0188c6f0b359a7f955",
                                "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],#2)=0",
                                "name": "Lite server not responding",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Lite server not responding for {$ESCALATION.TIMEOUT}",
                                        "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],{$ESCALATION.TIMEOUT})=0"
                                    }
                                ]
                            },
                            {
                                "uuid": "ad918a4c980e4402a725fbd9111a8f1d",
                                "expression": "max(/TON Node by lite-client/net.tcp.service[tcp,{HOST.CONN},{$LS.PORT}],{$ESCALATION.TIMEOUT})=0",
                                "name": "Lite server not responding for {$ESCALATION.TIMEOUT}",
                                "priority": "HIGH"
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$CONFIG.FILE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$ESCALATION.TIMEOUT}",
                        "value": "5m"
                    },
                    {
                        "macro": "{$LS.SYNC.HIGH.THRESHOLD}",
                        "value": "120"
                    },
                    {
                        "macro": "{$LS.SYNC.LOW.THRESHOLD}",
                        "value": "20"
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "c5a7461ed6214cd78ae3fd86d6396759",
                        "name": "YesNo",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "No"
                            },
                            {
                                "value": "1",
                                "newvalue": "Yes"
                            }
                        ]
                    }
                ]
            },
            {
                "uuid": "88c4c3883e794f4186cce22d4743a099",
                "template": "TON Node by zabbix agent",
                "name": "TON Node by zabbix agent",
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "c9d4b25fc8134339ae63b1dc4a822439",
                        "name": "Validator signal crashes",
                        "key": "system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} statistics.signal_crashes]",
                        "delay": "15m",
                        "triggers": [
                            {
                                "uuid": "e42181aae1f3464fb2cf1c577882031d",
                                "expression": "last(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} statistics.signal_crashes],#1)>0",
                                "name": "Validator-engine signal crashes",
                                "priority": "HIGH"
                            }
                        ]
                    },
                    {
                        "uuid": "1efb471cf1c6412c97aa67d9c5d42682",
                        "name": "Validator node data timestamp",
                        "key": "system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} timestamp]",
                        "delay": "15m",
                        "triggers": [
                            {
                                "uuid": "f6511cf95c944af592dfb4a5d32ddd08",
                                "expression": "countunique(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} timestamp],#2)=1",
                                "name": "Node data stale",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Node data stale for 4 checks",
                                        "expression": "countunique(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} timestamp],#4)=1"
                                    }
                                ]
                            },
                            {
                                "uuid": "22d8fc38b167467682158bcbc24d1807",
                                "expression": "countunique(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} timestamp],#4)=1",
                                "name": "Node data stale for 4 checks",
                                "priority": "AVERAGE"
                            }
                        ]
                    },
                    {
                        "uuid": "bc32a403094d413b8710b8d4d91af745",
                        "name": "Validator validator-engine pid",
                        "key": "system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-pid]",
                        "delay": "15m",
                        "triggers": [
                            {
                                "uuid": "0ec9811343c948ff841fce9dc4582eab",
                                "expression": "last(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-pid],#1)<>last(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-pid],#2)",
                                "name": "Validator-engine PID has changed",
                                "priority": "INFO"
                            }
                        ]
                    },
                    {
                        "uuid": "c742f7eb989847dd96c58cef1f01b611",
                        "name": "Validator validator-engine version check",
                        "key": "system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-version-check]",
                        "delay": "30m",
                        "trends": "0",
                        "value_type": "TEXT",
                        "triggers": [
                            {
                                "uuid": "fd48d660a08240bfa77a4fed522df9c9",
                                "expression": "last(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-version-check])=1",
                                "name": "Validator-engine needs update",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "170df77297e343bcb324b06b1399ffe2",
                                "expression": "last(/TON Node by zabbix agent/system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-version-check])=2",
                                "name": "Validator-engine software version check failure",
                                "priority": "INFO"
                            }
                        ]
                    },
                    {
                        "uuid": "3d28e1ea11d84380a133de6e0435351c",
                        "name": "Validator validator-engine version",
                        "key": "system.run[{$AGENT.GET.PATH.SCRIPT} {$AGENT.NODE.DATA.FILE} validator-engine-version]",
                        "delay": "30m",
                        "trends": "0",
                        "value_type": "TEXT",
                        "inventory_link": "SOFTWARE_APP_A"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$AGENT.GET.PATH.SCRIPT}",
                        "value": "/home/swisscops/ton-validator-zabbix/agent/get_json_path.py"
                    },
                    {
                        "macro": "{$AGENT.NODE.DATA.FILE}",
                        "value": "/tmp/node_data.json"
                    },
                    {
                        "macro": "{$CONFIG.FILE}",
                        "value": "CHANGEME"
                    }
                ]
            },
            {
                "uuid": "74c503bd159a4336b186e3af60f063d3",
                "template": "TON Service - http api",
                "name": "TON Service - http api",
                "templates": [
                    {
                        "name": "TON HTTPS Service"
                    }
                ],
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "8367b0d4adfb467eb678f42703a7da05",
                        "name": "SSL Certificate expiration",
                        "type": "EXTERNAL",
                        "key": "ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"]",
                        "delay": "1h",
                        "units": "days",
                        "triggers": [
                            {
                                "uuid": "26739c47c62d47d4a446f8eb51b4cc3f",
                                "expression": "min(/TON Service - http api/ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"],#3)<{$CERT.EXP.ALERT.THRESHOLD}",
                                "name": "SSL Certificate explires in less then {$CERT.EXP.ALERT.THRESHOLD} days",
                                "priority": "HIGH"
                            },
                            {
                                "uuid": "3384b252d84e4376baa15398dcd2fe99",
                                "expression": "min(/TON Service - http api/ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"],#3)<{$CERT.EXP.WARNING.THRESHOLD}",
                                "name": "SSL Certificate explires in less then {$CERT.EXP.WARNING.THRESHOLD} days",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "SSL Certificate explires in less then {$CERT.EXP.ALERT.THRESHOLD} days",
                                        "expression": "min(/TON Service - http api/ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"],#3)<{$CERT.EXP.ALERT.THRESHOLD}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "36460cb417dd47eda333ee6f1170c062",
                        "name": "SSL Certificate validity",
                        "type": "EXTERNAL",
                        "key": "ssl_cert_check.sh[\"valid\",\"{$HTTPS.CONN}\"]",
                        "delay": "1h"
                    }
                ],
                "httptests": [
                    {
                        "uuid": "f912632288f140329de622816af7dc46",
                        "name": "/",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "GET /",
                                "url": "https://{$HTTPS.CONN}/",
                                "headers": [
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "direct"
                            },
                            {
                                "tag": "c_method",
                                "value": "/"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "f1ab1dda5cb7416891b70604102b9102",
                        "name": "/getAddressBalance",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "GET /getAddressBalance",
                                "url": "https://{$HTTPS.CONN}/api/v2/getAddressBalance",
                                "query_fields": [
                                    {
                                        "name": "address",
                                        "value": "{$TEST.ADDRESS}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "direct"
                            },
                            {
                                "tag": "c_method",
                                "value": "getAddressBalance"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "c814b5b4bced4652960f23171b9e7489",
                        "name": "/getMasterchainInfo",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "GET /getMasterchainInfo",
                                "url": "https://{$HTTPS.CONN}/api/v2/getMasterchainInfo",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "direct"
                            },
                            {
                                "tag": "c_method",
                                "value": "getMasterchainInfo"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "aa7b3c0ba9f24a9fb1c360433e562f6a",
                        "name": "/getTransactions",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "GET /getTransactions",
                                "url": "https://{$HTTPS.CONN}/api/v2/getTransactions",
                                "query_fields": [
                                    {
                                        "name": "address",
                                        "value": "{$TEST.ADDRESS}"
                                    },
                                    {
                                        "name": "limit",
                                        "value": "10"
                                    },
                                    {
                                        "name": "to_lt",
                                        "value": "0"
                                    },
                                    {
                                        "name": "archival",
                                        "value": "false"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "direct"
                            },
                            {
                                "tag": "c_method",
                                "value": "getTransactions"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "ea51917cfa214300a78e4c10f1acd78b",
                        "name": "jsonRPC detectAddress",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST detectAddress",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"detectAddress\",\r\n  \"params\": {\"address\":\"{$TEST.DETECT.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "detectAddress"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "84b3a0a3e24f4eb39e969d7f4ea7c838",
                        "name": "jsonRPC getAddressBalance",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getAddressBalance",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getAddressBalance\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getAddressBalance"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "bb9ed53fa5534096a64a5115219925bc",
                        "name": "jsonRPC getAddressInformation",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getAddressInformation",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getAddressInformation\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getAddressInformation"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "c21e5ddc6c8d49e6ae39e3ca254cac02",
                        "name": "jsonRPC getAddressState",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getAddressState",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getWalletInformation\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getWalletInformation"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "5a782ea447014bd9bd77bd0b28ffb3ac",
                        "name": "jsonRPC getBlockHeader",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getBlockHeader",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getBlockHeader\",\r\n  \"params\": {$TEST.BLOCK},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getBlockHeader"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "b56d09e892ce4d23a9f72480810da5c5",
                        "name": "jsonRPC getBlockTransactions",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getBlockTransactions",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getBlockTransactions\",\r\n  \"params\": {$TEST.BLOCK},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getBlockTransactions"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "db7c420837794bff83698fa7916e1a4c",
                        "name": "jsonRPC getExtendedAddressInformation",
                        "delay": "2m",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getExtendedAddressInformation",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getExtendedAddressInformation\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "timeout": "45s",
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getExtendedAddressInformation"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "f3bbd9157a1e491e95458e536353b24d",
                        "name": "jsonRPC getMasterchainInfo",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getMasterchainInfo",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getMasterchainInfo\",\r\n  \"params\": {},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getMasterchainInfo"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "570d33da360343cda1ebda5b9b495f5a",
                        "name": "jsonRPC getTransactions",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getTransactions",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getTransactions\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getTransactions"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "a22250a45a3949239c8cddd19d5cf439",
                        "name": "jsonRPC getTransactions archival",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getTransactions archival",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getTransactions\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\", \"archival\":true},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getTransactions"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "8d88771eca084d9782f2e07f95891f55",
                        "name": "jsonRPC getWalletInformation",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST getWalletInformation",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getWalletInformation\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getWalletInformation"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "cfc3321dd9034dc3968569b649219e7f",
                        "name": "jsonRPC lookupBlock",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST lookupBlock",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"lookupBlock\",\r\n  \"params\": {$TEST.BLOCK},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "lookupBlock"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "56d123ee8f924cbc835f06add56f5557",
                        "name": "jsonRPC packAddress",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST packAddress",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"getWalletInformation\",\r\n  \"params\": {\"address\":\"0:001618D7CCAB90E4DD1CF7A9EC7594160137099BDD3D2D849A080BD61715493F\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "getWalletInformation"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "fc26604f41394f6694217883923c7503",
                        "name": "jsonRPC runGetMethod",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST runGetMethod",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"runGetMethod\",\r\n  \"params\": {\"address\": \"{$TEST.RUNGETMETHOD.ADDRESS}\", \"method\": \"{$TEST.RUNGETMETHOD}\", \"stack\": []},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "runGetMethod"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "aa87a082003a42078ee5bd305c09ea76",
                        "name": "jsonRPC shards",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST shards",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"shards\",\r\n  \"params\": {\"seqno\":\"{$TEST.SEQNO}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "shards"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "c8a2bcef12bd4c27880781ad2552c59b",
                        "name": "jsonRPC tryLocateResultTx",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST tryLocateResultTx",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"tryLocateResultTx\",\r\n  \"params\": {$TEST.TX},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "tryLocateResultTx"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "d7f3c42f3167423f855cec634a270b79",
                        "name": "jsonRPC tryLocateSourceTx",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST tryLocateSourceTx",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"tryLocateSourceTx\",\r\n  \"params\": {$TEST.TX},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "tryLocateSourceTx"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "9f2f8837077040b397cfde2e27b2cc6e",
                        "name": "jsonRPC tryLocateTx",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST tryLocateTx",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"tryLocateTx\",\r\n  \"params\": {$TEST.TX},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "tryLocateTx"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    },
                    {
                        "uuid": "48299d1197c64f9eb7c33ef17be638aa",
                        "name": "jsonRPC unpackAddress",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "verify_peer": "YES",
                        "steps": [
                            {
                                "name": "POST unpackAddress",
                                "url": "https://{$HTTPS.CONN}{$JSONRPC_ROUTE}",
                                "posts": "{\r\n  \"method\": \"unpackAddress\",\r\n  \"params\": {\"address\":\"{$TEST.ADDRESS}\"},\r\n  \"id\": 1\r\n}",
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "c_api",
                                "value": "jsonRPC"
                            },
                            {
                                "tag": "c_method",
                                "value": "unpackAddress"
                            },
                            {
                                "tag": "c_scope",
                                "value": "web_check"
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$ESCALATION.TIMEOUT}",
                        "value": "5m"
                    },
                    {
                        "macro": "{$FLAP.PERCENTAGE}",
                        "value": "10"
                    },
                    {
                        "macro": "{$FLAP.PERIOD}",
                        "value": "120m"
                    },
                    {
                        "macro": "{$JSONRPC_ROUTE}",
                        "value": "/api/v2/jsonRPC"
                    },
                    {
                        "macro": "{$TEST.ADDRESS}",
                        "value": "EQC3dNlesgVD8YbAazcauIrXBPfiVhMMr5YYk2in0Mtsz0Bz"
                    },
                    {
                        "macro": "{$TEST.BLOCK}",
                        "value": "{\"workchain\":-1,\"shard\":\"-9223372036854775808\",\"seqno\":\"22687554\"}"
                    },
                    {
                        "macro": "{$TEST.DETECT.ADDRESS}",
                        "value": "Ef-kkdY_B7p-77TLn2hUhM6QidWrrsl8FYWCIvBMpZKprKDH"
                    },
                    {
                        "macro": "{$TEST.RUNGETMETHOD}",
                        "value": "get_bridge_data"
                    },
                    {
                        "macro": "{$TEST.RUNGETMETHOD.ADDRESS}",
                        "value": "Ef_dJMSh8riPi3BTUTtcxsWjG8RLKnLctNjAM4rw8NN-xWdr"
                    },
                    {
                        "macro": "{$TEST.SEQNO}",
                        "value": "22687554"
                    },
                    {
                        "macro": "{$TEST.TX}",
                        "value": "{\"source\":\"EQC3dNlesgVD8YbAazcauIrXBPfiVhMMr5YYk2in0Mtsz0Bz\",\"destination\":\"EQC4sJrUZbjmszqI4CQm1CfeALp1YdZd3nEtArNftNuQA4p8\",\"created_lt\":30197883000004}"
                    }
                ]
            },
            {
                "uuid": "dd7d3ef421ca4b538c579f70a659630b",
                "template": "TON Service - indexer",
                "name": "TON Service - indexer",
                "templates": [
                    {
                        "name": "TON HTTPS Service"
                    }
                ],
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "a5ddb51e7a6f4e1b97bba8dc601de49a",
                        "name": "Block latency masterchain",
                        "type": "EXTERNAL",
                        "key": "check_indexer.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\", \"0\", \"--workchain\", \"-1\", \"--metric\", \"latency_blocks\", \"--period\", \"300\"]",
                        "delay": "5m",
                        "value_type": "FLOAT",
                        "units": "blocks",
                        "triggers": [
                            {
                                "uuid": "6432d516ea41456ba689a4472aa71778",
                                "expression": "last(/TON Service - indexer/check_indexer.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\", \"0\", \"--workchain\", \"-1\", \"--metric\", \"latency_blocks\", \"--period\", \"300\"])>{$BLOCK.LATENCY.ALERT}",
                                "name": "Masterchain block latency is larger than {$BLOCK.LATENCY.ALERT}",
                                "priority": "HIGH"
                            },
                            {
                                "uuid": "958c3631a0184e1f916c85ea291c913e",
                                "expression": "last(/TON Service - indexer/check_indexer.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\", \"0\", \"--workchain\", \"-1\", \"--metric\", \"latency_blocks\", \"--period\", \"300\"])>{$BLOCK.LATENCY.WARN}",
                                "name": "Masterchain block latency is larger than {$BLOCK.LATENCY.WARN}",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Masterchain block latency is larger than {$BLOCK.LATENCY.ALERT}",
                                        "expression": "last(/TON Service - indexer/check_indexer.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\", \"0\", \"--workchain\", \"-1\", \"--metric\", \"latency_blocks\", \"--period\", \"300\"])>{$BLOCK.LATENCY.ALERT}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "ab51b2ce0bf4478a99157e908802be0c",
                        "name": "Missing masterchain blocks",
                        "type": "EXTERNAL",
                        "key": "check_indexer.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\", \"0\", \"--workchain\", \"-1\", \"--metric\", \"missing_blocks\", \"--period\", \"1200\"]",
                        "delay": "20m",
                        "units": "blocks",
                        "triggers": [
                            {
                                "uuid": "402f04fa67754634adbc3a9dc790df4c",
                                "expression": "last(/TON Service - indexer/check_indexer.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\", \"0\", \"--workchain\", \"-1\", \"--metric\", \"missing_blocks\", \"--period\", \"1200\"])>0",
                                "name": "Masterchain blocks missing",
                                "priority": "HIGH"
                            }
                        ]
                    }
                ],
                "httptests": [
                    {
                        "uuid": "8ac2b4c9d2e7443dbc860f9a705b6c2b",
                        "name": "/getBlockByTransaction",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getBlockByTransaction",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getBlockByTransaction",
                                "query_fields": [
                                    {
                                        "name": "tx_hash",
                                        "value": "{$TEST.TX.HASH}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "a7bf82a21a4c465d96573b3599531739",
                        "name": "/getBlocksByUnixTime",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getBlocksByUnixTime",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getBlocksByUnixTime",
                                "query_fields": [
                                    {
                                        "name": "limit",
                                        "value": "5"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "91078526f5814de083c3ee77a999d027",
                        "name": "/getChainLastTransactions",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getChainLastTransactions",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getChainLastTransactions",
                                "query_fields": [
                                    {
                                        "name": "workchain",
                                        "value": "-1"
                                    },
                                    {
                                        "name": "limit",
                                        "value": "5"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "28a68db74393419e91f86f2f5c11ff08",
                        "name": "/getInMessageByTxID",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getInMessageByTxID",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getInMessageByTxID",
                                "query_fields": [
                                    {
                                        "name": "tx_hash",
                                        "value": "{$TEST.TX.HASH}"
                                    },
                                    {
                                        "name": "tx_lt",
                                        "value": "{$TEST.TX.LT}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "28b837796e1d49ff9d2f3f3819a49d42",
                        "name": "/getMessageByHash",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getMessageByHash",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getMessageByHash",
                                "query_fields": [
                                    {
                                        "name": "msg_hash",
                                        "value": "{$TEST.MSG.HASH}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "54f4cf1d80a548c5a4f3b66ad8dd5665",
                        "name": "/getOutMessagesByTxID",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getOutMessagesByTxID",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getOutMessagesByTxID",
                                "query_fields": [
                                    {
                                        "name": "tx_hash",
                                        "value": "{$TEST.TX.HASH}"
                                    },
                                    {
                                        "name": "tx_lt",
                                        "value": "{$TEST.TX.LT}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "4f222eb17f4b4550b69fe55ef640ee7a",
                        "name": "/getTransactionByHash",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getTransactionByHash",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getTransactionByHash",
                                "query_fields": [
                                    {
                                        "name": "tx_hash",
                                        "value": "{$TEST.TX.HASH}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "478010f56e0d45f9a4757a51ae3d6a23",
                        "name": "/getTransactionByInMessageHash",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getTransactionByInMessageHash",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getTransactionByInMessageHash",
                                "query_fields": [
                                    {
                                        "name": "msg_hash",
                                        "value": "{$TEST.MSG.HASH}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "ee239139204c47d5b4ad3b9002572357",
                        "name": "/getTransactionsByAddress",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getTransactionsByAddress",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getTransactionsByAddress",
                                "query_fields": [
                                    {
                                        "name": "address",
                                        "value": "{$TEST.ADDRESS}"
                                    },
                                    {
                                        "name": "limit",
                                        "value": "5"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "9b64dab8ef8c4249aafa2da2de73b4ae",
                        "name": "/getTransactionsByMasterchainSeqno",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getTransactionsByMasterchainSeqno",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getTransactionsByMasterchainSeqno",
                                "query_fields": [
                                    {
                                        "name": "seqno",
                                        "value": "{$TEST.SEQNO.MC}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "6a22639b40b2429d90e7c22e5c9ca9e1",
                        "name": "/getTransactionsInBlock",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET getTransactionsInBlock",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/getTransactionsInBlock",
                                "query_fields": [
                                    {
                                        "name": "workchain",
                                        "value": "-1"
                                    },
                                    {
                                        "name": "shard",
                                        "value": "{$TEST.SHARD}"
                                    },
                                    {
                                        "name": "seqno",
                                        "value": "{$TEST.SEQNO.MC}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    },
                    {
                        "uuid": "86d6db7b40f5424798c6f65b297bfb52",
                        "name": "/lookupMasterchainBlock",
                        "delay": "30s",
                        "headers": [
                            {
                                "name": "X-API-Key",
                                "value": "{$API.KEY}"
                            }
                        ],
                        "steps": [
                            {
                                "name": "GET lookupMasterchainBlock",
                                "url": "https://{$HTTPS.CONN}{$API.PREFIX}/lookupMasterchainBlock",
                                "query_fields": [
                                    {
                                        "name": "workchain",
                                        "value": "0"
                                    },
                                    {
                                        "name": "shard",
                                        "value": "{$TEST.SHARD}"
                                    },
                                    {
                                        "name": "seqno",
                                        "value": "{$TEST.SEQNO.WC}"
                                    }
                                ],
                                "headers": [
                                    {
                                        "name": "accept",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "Content-Type",
                                        "value": "application/json"
                                    },
                                    {
                                        "name": "X-API-Key",
                                        "value": "{$API.KEY}"
                                    }
                                ],
                                "status_codes": "200"
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$API.PREFIX}",
                        "value": "/api/index"
                    },
                    {
                        "macro": "{$BLOCK.LATENCY.ALERT}",
                        "value": "100"
                    },
                    {
                        "macro": "{$BLOCK.LATENCY.WARN}",
                        "value": "20"
                    },
                    {
                        "macro": "{$CONFIG.FILE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$ESCALATION.TIMEOUT}",
                        "value": "5m"
                    },
                    {
                        "macro": "{$FLAP.PERCENTAGE}",
                        "value": "10"
                    },
                    {
                        "macro": "{$FLAP.PERIOD}",
                        "value": "120m"
                    },
                    {
                        "macro": "{$TEST.ADDRESS}",
                        "value": "EQC3dNlesgVD8YbAazcauIrXBPfiVhMMr5YYk2in0Mtsz0Bz"
                    },
                    {
                        "macro": "{$TEST.MSG.HASH}",
                        "value": "VqQXc8TQc9cEpZoL+D5npNlR+C+3Gc17Td37YtDGjSo="
                    },
                    {
                        "macro": "{$TEST.SEQNO.MC}",
                        "value": "22687554"
                    },
                    {
                        "macro": "{$TEST.SEQNO.WC}",
                        "value": "28024844"
                    },
                    {
                        "macro": "{$TEST.SHARD}",
                        "value": "-9223372036854775808"
                    },
                    {
                        "macro": "{$TEST.TX.HASH}",
                        "value": "S9koSRrN3GURRI2gWPb6IOKJfNm07QPgHv74kH/MByY="
                    },
                    {
                        "macro": "{$TEST.TX.LT}",
                        "value": "30258618000005"
                    }
                ]
            },
            {
                "uuid": "d63d255c65564240b88a9040fe91fd37",
                "template": "TON SSL Certificate checks",
                "name": "TON SSL Certificate checks",
                "groups": [
                    {
                        "name": "Templates/Applications"
                    }
                ],
                "items": [
                    {
                        "uuid": "8860e308ab654045a8e72d23aca9ef94",
                        "name": "SSL Certificate expiration",
                        "type": "EXTERNAL",
                        "key": "ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"]",
                        "delay": "1h",
                        "units": "days",
                        "triggers": [
                            {
                                "uuid": "4a658f6aad84451f975fac3f22e57dfc",
                                "expression": "min(/TON SSL Certificate checks/ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"],#3)<{$CERT.EXP.ALERT.THRESHOLD}",
                                "name": "SSL Certificate explires in less then {$CERT.EXP.ALERT.THRESHOLD} days",
                                "priority": "HIGH"
                            },
                            {
                                "uuid": "a0e86d872abe491ea626a80f6b3ce272",
                                "expression": "min(/TON SSL Certificate checks/ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"],#3)<{$CERT.EXP.WARNING.THRESHOLD}",
                                "name": "SSL Certificate explires in less then {$CERT.EXP.WARNING.THRESHOLD} days",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "SSL Certificate explires in less then {$CERT.EXP.ALERT.THRESHOLD} days",
                                        "expression": "min(/TON SSL Certificate checks/ssl_cert_check.sh[\"expire\",\"{$HTTPS.CONN}\"],#3)<{$CERT.EXP.ALERT.THRESHOLD}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "17aa795705454b97829a3087857f95b4",
                        "name": "SSL Certificate validity",
                        "type": "EXTERNAL",
                        "key": "ssl_cert_check.sh[\"valid\",\"{$HTTPS.CONN}\"]",
                        "delay": "1h"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$CERT.EXP.ALERT.THRESHOLD}",
                        "value": "7"
                    },
                    {
                        "macro": "{$CERT.EXP.WARNING.THRESHOLD}",
                        "value": "14"
                    }
                ]
            },
            {
                "uuid": "3c47d0301fde471aba727e39914ecc0c",
                "template": "TON Validator",
                "name": "TON Validator",
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "cf6abfaa1b7b49e6b6feec3a69cae723",
                        "name": "Validator complaints in 24h",
                        "type": "EXTERNAL",
                        "key": "check_complaints.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\",\"86400\"]",
                        "delay": "30m",
                        "triggers": [
                            {
                                "uuid": "49fe6f6a3a1140afb33aa3233dd60871",
                                "expression": "last(/TON Validator/check_complaints.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\",\"86400\"])>0",
                                "name": "Validator had complaints in 24h",
                                "priority": "HIGH"
                            }
                        ]
                    },
                    {
                        "uuid": "b9dc4669623e4b9bb0a6b3ac599bd978",
                        "name": "Validator participating in cycle",
                        "type": "EXTERNAL",
                        "key": "check_cycle_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"]",
                        "delay": "30m",
                        "valuemap": {
                            "name": "YesNo"
                        },
                        "triggers": [
                            {
                                "uuid": "c03d9b17e0c8410db6ea1bbdd7e8e56c",
                                "expression": "last(/TON Validator/check_cycle_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"],#2)=1 and last(/TON Validator/check_cycle_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"],#1)=0",
                                "name": "Validator has not rejoined validation cycle",
                                "status": "DISABLED",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "42f81e9a45cc4c309ad5869d721092bc",
                                "expression": "last(/TON Validator/check_cycle_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"],#2)=0 and last(/TON Validator/check_cycle_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"],#1)=1",
                                "name": "Validator has rejoined validation cycle",
                                "status": "DISABLED",
                                "priority": "INFO"
                            }
                        ]
                    },
                    {
                        "uuid": "0c2fce4d80c442d0ab5f9ae72a70e576",
                        "name": "Validator elections participation lag",
                        "type": "EXTERNAL",
                        "key": "check_election_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"]",
                        "delay": "5m",
                        "units": "seconds",
                        "triggers": [
                            {
                                "uuid": "1fa0dda2edfa443d9f568f36b8770dbc",
                                "expression": "last(/TON Validator/check_election_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"])>{$ELECTION.PARTICIPATION.TRIGGER.HIGH}",
                                "name": "Validator did not participate in election in {$ELECTION.PARTICIPATION.TRIGGER.HIGH}sec",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "c99a17791e14488ab5ecde13c22cfc8e",
                                "expression": "last(/TON Validator/check_election_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"])>{$ELECTION.PARTICIPATION.TRIGGER.LOW}",
                                "name": "Validator did not participate in election in {$ELECTION.PARTICIPATION.TRIGGER.LOW}sec",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Validator did not participate in election in {$ELECTION.PARTICIPATION.TRIGGER.HIGH}sec",
                                        "expression": "last(/TON Validator/check_election_participation.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$NODE.ADNL}\"])>{$ELECTION.PARTICIPATION.TRIGGER.HIGH}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "ceb6caae6f90492d8eeb86f3aa0028ab",
                        "name": "Validator wallet balance",
                        "type": "EXTERNAL",
                        "key": "get_account_balance.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$WALLET.ADDR}\"]",
                        "delay": "15m",
                        "value_type": "FLOAT",
                        "units": "TON",
                        "triggers": [
                            {
                                "uuid": "ef14227d8b0a4ad4bb8585ee3991eb5f",
                                "expression": "last(/TON Validator/get_account_balance.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$WALLET.ADDR}\"],#1)<{$WALLET.BALANCE.TRIGGER.HIGH}",
                                "name": "Validator wallet balance is < {$WALLET.BALANCE.TRIGGER.HIGH}",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "af7a777d5b1247bc9b4be2f8f873d1d0",
                                "expression": "last(/TON Validator/get_account_balance.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$WALLET.ADDR}\"],#1)<{$WALLET.BALANCE.TRIGGER.LOW}",
                                "name": "Validator wallet balance is < {$WALLET.BALANCE.TRIGGER.LOW}",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Validator wallet balance is < {$WALLET.BALANCE.TRIGGER.HIGH}",
                                        "expression": "last(/TON Validator/get_account_balance.py[\"--config\",\"{$CONFIG.FILE}\",\"--verbosity\",\"0\",\"{$WALLET.ADDR}\"],#1)<{$WALLET.BALANCE.TRIGGER.HIGH}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "9dd18896738b4a2da138a4ffec8025ab",
                        "name": "Validator efficiency cycle",
                        "type": "EXTERNAL",
                        "key": "get_validators_load.py[\"--file\",\"{$LOAD.FILE.CYCLE}\",\"--verbosity\",\"0\",\"--maxage\",{$LOAD.FILE.MAXAGE}, \"--metric\", \"efficiency\", \"{$NODE.ADNL}\"]",
                        "delay": "5m",
                        "value_type": "FLOAT",
                        "units": "%"
                    },
                    {
                        "uuid": "0c04bc65cf88411ca4e17ee8412e25f8",
                        "name": "Validator efficiency hour",
                        "type": "EXTERNAL",
                        "key": "get_validators_load.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--maxage\",{$LOAD.FILE.MAXAGE}, \"--metric\", \"efficiency\", \"{$NODE.ADNL}\"]",
                        "delay": "5m",
                        "value_type": "FLOAT",
                        "units": "%"
                    },
                    {
                        "uuid": "336913af1cfc44a2a8bedff45947a6c7",
                        "name": "Validator efficiency online",
                        "type": "EXTERNAL",
                        "key": "get_validators_load.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--maxage\",{$LOAD.FILE.MAXAGE}, \"--metric\", \"online\", \"{$NODE.ADNL}\"]",
                        "delay": "5m",
                        "valuemap": {
                            "name": "YesNo"
                        },
                        "triggers": [
                            {
                                "uuid": "8bf08a5092e74094b6729aa90f1b7dd8",
                                "expression": "max(/TON Validator/get_validators_load.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--maxage\",{$LOAD.FILE.MAXAGE}, \"--metric\", \"online\", \"{$NODE.ADNL}\"],{$VALIDATOR.OFFLINE.PERIOD.TRIGGER.HIGH})=0",
                                "name": "Validator offline in blockchain for > {$VALIDATOR.OFFLINE.PERIOD.TRIGGER.HIGH}sec",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "6615d44393b24694a0568f7f857fcab7",
                                "expression": "max(/TON Validator/get_validators_load.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--maxage\",{$LOAD.FILE.MAXAGE}, \"--metric\", \"online\", \"{$NODE.ADNL}\"],{$VALIDATOR.OFFLINE.PERIOD.TRIGGER.LOW})=0",
                                "name": "Validator offline in blockchain for > {$VALIDATOR.OFFLINE.PERIOD.TRIGGER.LOW}sec",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Validator offline in blockchain for > {$VALIDATOR.OFFLINE.PERIOD.TRIGGER.HIGH}sec",
                                        "expression": "max(/TON Validator/get_validators_load.py[\"--file\",\"{$LOAD.FILE.HOUR}\",\"--verbosity\",\"0\",\"--maxage\",{$LOAD.FILE.MAXAGE}, \"--metric\", \"online\", \"{$NODE.ADNL}\"],{$VALIDATOR.OFFLINE.PERIOD.TRIGGER.HIGH})=0"
                                    }
                                ]
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$CONFIG.FILE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$ELECTION.PARTICIPATION.TRIGGER.HIGH}",
                        "value": "3600",
                        "description": "seconds"
                    },
                    {
                        "macro": "{$ELECTION.PARTICIPATION.TRIGGER.LOW}",
                        "value": "600",
                        "description": "seconds"
                    },
                    {
                        "macro": "{$LOAD.FILE.CYCLE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.HOUR}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.MAXAGE}",
                        "value": "300",
                        "description": "seconds"
                    },
                    {
                        "macro": "{$VALIDATOR.OFFLINE.PERIOD.TRIGGER.HIGH}",
                        "value": "10800",
                        "description": "seconds"
                    },
                    {
                        "macro": "{$VALIDATOR.OFFLINE.PERIOD.TRIGGER.LOW}",
                        "value": "3600",
                        "description": "seconds"
                    },
                    {
                        "macro": "{$WALLET.BALANCE.TRIGGER.HIGH}",
                        "value": "50"
                    },
                    {
                        "macro": "{$WALLET.BALANCE.TRIGGER.LOW}",
                        "value": "100"
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "a91dcc04d18a4cc59c8604d57381a866",
                        "name": "YesNo",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "No"
                            },
                            {
                                "value": "1",
                                "newvalue": "Yes"
                            }
                        ]
                    }
                ]
            },
            {
                "uuid": "2464be22c4a2468b988b04ce34ddfd51",
                "template": "TON Validator pools",
                "name": "TON Validator pools",
                "groups": [
                    {
                        "name": "TON"
                    }
                ],
                "items": [
                    {
                        "uuid": "13a3d3bf1dcc4bc7b23717ee762ff967",
                        "name": "Pools nominators balance",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\",\"{$P2.ADDR}\"]",
                        "delay": "1h",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "81af366a86a94e3a85d5015c8f6018db",
                        "name": "Pool 1 nominators balance",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"]",
                        "delay": "5m",
                        "value_type": "FLOAT",
                        "triggers": [
                            {
                                "uuid": "2bc64de927d049d1bf078ced9f5f2c07",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#1)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}",
                                "name": "Pool 1 nominators balance has decreased by more than {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}%",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "10b4a98885f148de99bd376095952f1f",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#1)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.DECREASE.LOW}",
                                "name": "Pool 1 nominators balance has decreased by more than {$POOL.NOMINATORS.BALANCE.DECREASE.LOW}%",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Pool 1 nominators balance has decreased by more than {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}%",
                                        "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#1)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}"
                                    }
                                ]
                            },
                            {
                                "uuid": "ff1f6738ace04f6b9a0f06b67b13ce8e",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#1) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}",
                                "name": "Pool 1 nominators balance has increased by more than {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}%",
                                "priority": "WARNING"
                            },
                            {
                                "uuid": "42ff558c3e5c4fec9856f0939f6a0f8d",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#1) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.INCREASE.LOW}",
                                "name": "Pool 1 nominators balance has increased by more than {$POOL.NOMINATORS.BALANCE.INCREASE.LOW}%",
                                "priority": "INFO",
                                "dependencies": [
                                    {
                                        "name": "Pool 1 nominators balance has increased by more than {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}%",
                                        "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#1) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "b2f561ad2534445c93e02796109101fd",
                        "name": "Pool 2 nominators balance",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"]",
                        "delay": "1h",
                        "value_type": "FLOAT",
                        "triggers": [
                            {
                                "uuid": "967f4366157246e79f54e4d2383ff683",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#1)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}",
                                "name": "Pool 2 nominators balance has decreased by more than {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}%",
                                "priority": "AVERAGE"
                            },
                            {
                                "uuid": "7e4cac83c73b418bbc4f6d36b2edc511",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#1)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.DECREASE.LOW}",
                                "name": "Pool 2 nominators balance has decreased by more than {$POOL.NOMINATORS.BALANCE.DECREASE.LOW}%",
                                "priority": "WARNING",
                                "dependencies": [
                                    {
                                        "name": "Pool 2 nominators balance has decreased by more than {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}%",
                                        "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#1)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}"
                                    }
                                ]
                            },
                            {
                                "uuid": "874cf149ce97427d95e32f44f29c4fdd",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#1) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}",
                                "name": "Pool 2 nominators balance has increased by more than {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}%",
                                "priority": "WARNING"
                            },
                            {
                                "uuid": "712abb5a74b7483caafbd39c22348bdb",
                                "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#1) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.INCREASE.LOW}",
                                "name": "Pool 2 nominators balance has increased by more than {$POOL.NOMINATORS.BALANCE.INCREASE.LOW}%",
                                "priority": "INFO",
                                "dependencies": [
                                    {
                                        "name": "Pool 2 nominators balance has increased by more than {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}%",
                                        "expression": "((last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#1) - last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) / last(/TON Validator pools/get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"],#2)) * 100 > {$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "736c5fa87f54425a8493c0bea83b0837",
                        "name": "Pools nominators count",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_count\",\"--verbosity\",\"0\",\"{$P1.ADDR}\",\"{$P2.ADDR}\"]",
                        "delay": "1h"
                    },
                    {
                        "uuid": "4dc3d7552090469a8d8970d4a98b7d31",
                        "name": "Pool 1 nominators count",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_count\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"]",
                        "delay": "1h"
                    },
                    {
                        "uuid": "3d23309a913743cba4eeebe2677cb922",
                        "name": "Pool 2 nominators count",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"nominators_count\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"]",
                        "delay": "1h"
                    },
                    {
                        "uuid": "7a651f50ac3f4940b0ab2d13ceec18ac",
                        "name": "Pool 1 state",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"state\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"]",
                        "delay": "15m"
                    },
                    {
                        "uuid": "93db93e9889a4695b7a558169e60de1b",
                        "name": "Pool 2 state",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"state\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"]",
                        "delay": "15m"
                    },
                    {
                        "uuid": "e0e1ff59e6454802bece4af3eaf7b22a",
                        "name": "Pools validator balance",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"validator_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\",\"{$P2.ADDR}\"]",
                        "delay": "1h",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "7ffdd51f95b549b7b4cffa20b9c562f7",
                        "name": "Pool 1 validator balance",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"validator_balance\",\"--verbosity\",\"0\",\"{$P1.ADDR}\"]",
                        "delay": "1h",
                        "value_type": "FLOAT"
                    },
                    {
                        "uuid": "cbbf9ea15c3b479abf3df27bed46b19a",
                        "name": "Pool 2 validator balance",
                        "type": "EXTERNAL",
                        "key": "get_pool_info.py[\"--config\",\"{$CONFIG.FILE}\",\"--metric\",\"validator_balance\",\"--verbosity\",\"0\",\"{$P2.ADDR}\"]",
                        "delay": "1h",
                        "value_type": "FLOAT"
                    }
                ],
                "macros": [
                    {
                        "macro": "{$CONFIG.FILE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.CYCLE}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.HOUR}",
                        "value": "CHANGEME"
                    },
                    {
                        "macro": "{$LOAD.FILE.MAXAGE}",
                        "value": "300"
                    },
                    {
                        "macro": "{$POOL.NOMINATORS.BALANCE.DECREASE.HIGH}",
                        "value": "20",
                        "description": "in percent"
                    },
                    {
                        "macro": "{$POOL.NOMINATORS.BALANCE.DECREASE.LOW}",
                        "value": "10",
                        "description": "in percent"
                    },
                    {
                        "macro": "{$POOL.NOMINATORS.BALANCE.INCREASE.HIGH}",
                        "value": "40",
                        "description": "in percent"
                    },
                    {
                        "macro": "{$POOL.NOMINATORS.BALANCE.INCREASE.LOW}",
                        "value": "10",
                        "description": "in percent"
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "0ba24fc074b641f980b7bb74b3eab795",
                        "name": "YesNo",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "No"
                            },
                            {
                                "value": "1",
                                "newvalue": "Yes"
                            }
                        ]
                    }
                ]
            }
        ],
        "triggers": [
            {
                "uuid": "46153bd06da749fd9ef7107d3d133e2a",
                "expression": "last(/TON Service - http api/web.test.fail[/getAddressBalance])>0",
                "name": "API check [/getAddressBalance] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "API check [/getAddressBalance] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[/getAddressBalance],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "a2c4c07821954beea34722c141301bb0",
                "expression": "min(/TON Service - http api/web.test.fail[/getAddressBalance],{$ESCALATION.TIMEOUT})>0",
                "name": "API check [/getAddressBalance] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "6293a9c0a1754eb3a4ecfe84b5086735",
                "expression": "last(/TON Service - http api/web.test.fail[/getMasterchainInfo])>0",
                "name": "API check [/getMasterchainInfo] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "API check [/getMasterchainInfo] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[/getMasterchainInfo],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "6782511168314b38924fd33079c971f1",
                "expression": "min(/TON Service - http api/web.test.fail[/getMasterchainInfo],{$ESCALATION.TIMEOUT})>0",
                "name": "API check [/getMasterchainInfo] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "f0f834714fe7446da6ba420d5a46402d",
                "expression": "last(/TON Service - http api/web.test.fail[/getTransactions])>0",
                "name": "API check [/getTransactions] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "API check [/getTransactions] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[/getTransactions],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "b5be1d49a2e64c018c52020a87dc80bd",
                "expression": "min(/TON Service - http api/web.test.fail[/getTransactions],{$ESCALATION.TIMEOUT})>0",
                "name": "API check [/getTransactions] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "1ceb1d543d2649d5ad50de8ba08cb966",
                "expression": "last(/TON Service - http api/web.test.fail[/])>0",
                "name": "API check [/] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "API check [/] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[/],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "b05902404beb47168817ec67fce29d6b",
                "expression": "min(/TON Service - http api/web.test.fail[/],{$ESCALATION.TIMEOUT})>0",
                "name": "API check [/] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "008597a329234382bae3775f84e6abcb",
                "expression": "last(/TON Service - indexer/web.test.fail[/getBlockByTransaction])>0",
                "name": "getBlockByTransaction check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getBlockByTransaction check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getBlockByTransaction],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "1376c07bcd0d474fb12ff45e86c171b3",
                "expression": "min(/TON Service - indexer/web.test.fail[/getBlockByTransaction],{$ESCALATION.TIMEOUT})>0",
                "name": "getBlockByTransaction check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "4b045d5ad57d49c298768ad0d2bd0ef7",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getBlockByTransaction],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getBlockByTransaction],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getBlockByTransaction check failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getBlockByTransaction check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getBlockByTransaction],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "94853f2258314fc1afb9d732a58403de",
                "expression": "last(/TON Service - indexer/web.test.fail[/getBlocksByUnixTime])>0",
                "name": "getBlocksByUnixTime check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getBlocksByUnixTime check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getBlocksByUnixTime],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "cdad76cc4a3a4ff5b8e02cb05e55a64e",
                "expression": "min(/TON Service - indexer/web.test.fail[/getBlocksByUnixTime],{$ESCALATION.TIMEOUT})>0",
                "name": "getBlocksByUnixTime check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "b3ae8652c991402b85b2ed8d0ea018c2",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getBlocksByUnixTime],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getBlocksByUnixTime],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getBlocksByUnixTime check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getBlocksByUnixTime check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getBlocksByUnixTime],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "dc68a38fef864c4cb9a0bfa7912c5f8b",
                "expression": "last(/TON Service - indexer/web.test.fail[/getChainLastTransactions])>0",
                "name": "getChainLastTransactions check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getChainLastTransactions check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getChainLastTransactions],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "3aafdd6760944666a3ad9b3e418e6d4a",
                "expression": "min(/TON Service - indexer/web.test.fail[/getChainLastTransactions],{$ESCALATION.TIMEOUT})>0",
                "name": "getChainLastTransactions check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "436a883881ad4bfdb0d9d0cc04eb0dcb",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getChainLastTransactions],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getChainLastTransactions],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getChainLastTransactions check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getChainLastTransactions check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getChainLastTransactions],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "ef2d03bc51684dd2bd8a2a92593536e4",
                "expression": "last(/TON Service - indexer/web.test.fail[/getInMessageByTxID])>0",
                "name": "getInMessageByTxID check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getInMessageByTxID check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getInMessageByTxID],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "5fc6d24a72404009bdc0bddbbc26ad2a",
                "expression": "min(/TON Service - indexer/web.test.fail[/getInMessageByTxID],{$ESCALATION.TIMEOUT})>0",
                "name": "getInMessageByTxID check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "2947f0fb0c6f4376b8bdfdcf1ed912f5",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getInMessageByTxID],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getInMessageByTxID],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getInMessageByTxID check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getInMessageByTxID check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getInMessageByTxID],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "0ae86e559be04520a9fdd81d8ac4a93a",
                "expression": "last(/TON Service - indexer/web.test.fail[/getMessageByHash])>0",
                "name": "getMessageByHash check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getMessageByHash check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getMessageByHash],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "293880627c4d479fac5b87b73e0944a3",
                "expression": "min(/TON Service - indexer/web.test.fail[/getMessageByHash],{$ESCALATION.TIMEOUT})>0",
                "name": "getMessageByHash check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "8e52000d1b5c4db78bd09d59efb31d14",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getMessageByHash],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getMessageByHash],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getMessageByHash check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getMessageByHash check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getMessageByHash],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "770b3992d6c8422294d2da8304984a5a",
                "expression": "last(/TON Service - indexer/web.test.fail[/getOutMessagesByTxID])>0",
                "name": "getOutMessagesByTxID check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getOutMessagesByTxID check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getOutMessagesByTxID],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "096728313cb446dfba3fc22aafee2501",
                "expression": "min(/TON Service - indexer/web.test.fail[/getOutMessagesByTxID],{$ESCALATION.TIMEOUT})>0",
                "name": "getOutMessagesByTxID check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "2480c10fe0184d1dbec611706f0301d7",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getOutMessagesByTxID],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getOutMessagesByTxID],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getOutMessagesByTxID check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getOutMessagesByTxID check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getOutMessagesByTxID],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "35383ca3b76946e9b454f3faaf710e19",
                "expression": "last(/TON Service - indexer/web.test.fail[/getTransactionByHash])>0",
                "name": "getTransactionByHash check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getTransactionByHash check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionByHash],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "05bd42b172264f2187ca44e42c9e1d7c",
                "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionByHash],{$ESCALATION.TIMEOUT})>0",
                "name": "getTransactionByHash check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "7dd28bf3ca274f57a46008de7ae26cce",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getTransactionByHash],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getTransactionByHash],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getTransactionByHash check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getTransactionByHash check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionByHash],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "d9a95e4cbf8d4b6489adfafe0b3127e8",
                "expression": "last(/TON Service - indexer/web.test.fail[/getTransactionByInMessageHash])>0",
                "name": "getTransactionByInMessageHash check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getTransactionByInMessageHash check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionByInMessageHash],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "2893ef6cf1ac4185ada8d7733f25b261",
                "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionByInMessageHash],{$ESCALATION.TIMEOUT})>0",
                "name": "getTransactionByInMessageHash check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "0dfe851da55e477287850c5ab7251a3d",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getTransactionByInMessageHash],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getTransactionByInMessageHash],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getTransactionByInMessageHash check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getTransactionByInMessageHash check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionByInMessageHash],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "e4a063f7d2bc4e12a06db0d125ea3bc2",
                "expression": "last(/TON Service - indexer/web.test.fail[/getTransactionsByAddress])>0",
                "name": "getTransactionsByAddress check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getTransactionsByAddress check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsByAddress],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "2a87c34fd1e04a74b4922e1b47399d37",
                "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsByAddress],{$ESCALATION.TIMEOUT})>0",
                "name": "getTransactionsByAddress check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "b6bec2c970fa4a91beffda2434fd0ee6",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getTransactionsByAddress],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getTransactionsByAddress],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getTransactionsByAddress check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getTransactionsByAddress check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsByAddress],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "1c2cb7f74b0543a78243c86fd065c2ad",
                "expression": "last(/TON Service - indexer/web.test.fail[/getTransactionsByMasterchainSeqno])>0",
                "name": "getTransactionsByMasterchainSeqno check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getTransactionsByMasterchainSeqno check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsByMasterchainSeqno],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "f32bb9caebac40178de0a6a2f39cfb01",
                "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsByMasterchainSeqno],{$ESCALATION.TIMEOUT})>0",
                "name": "getTransactionsByMasterchainSeqno check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "e5738da4d6444893acbcfe274044a16d",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getTransactionsByMasterchainSeqno],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getTransactionsByMasterchainSeqno],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getTransactionsByMasterchainSeqno check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getTransactionsByMasterchainSeqno check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsByMasterchainSeqno],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "6565ad84805441dfb66c3a74dd16c4d8",
                "expression": "last(/TON Service - indexer/web.test.fail[/getTransactionsInBlock])>0",
                "name": "getTransactionsInBlock check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "getTransactionsInBlock check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsInBlock],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "0f7a52710b94486886b40cfca1abc2be",
                "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsInBlock],{$ESCALATION.TIMEOUT})>0",
                "name": "getTransactionsInBlock check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "9fc5951649fc4d53ab52f10367ad270d",
                "expression": "((count(/TON Service - indexer/web.test.fail[/getTransactionsInBlock],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/getTransactionsInBlock],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "getTransactionsInBlock check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "getTransactionsInBlock check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/getTransactionsInBlock],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "44c21c94027e47038f154e7a2c092b2c",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC detectAddress])>0",
                "name": "jsonRPC check [detectAddress] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [detectAddress] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC detectAddress],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "8db253690bba4ec1acc48b4cf2240bc1",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC detectAddress],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [detectAddress] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "82dfddd83e0d464eb4395e3d1c5fee7f",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC detectAddress],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC detectAddress],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [detectAddress] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [detectAddress] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC detectAddress],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "c32799aa5f2f4cd798c24d93a3e9230d",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getAddressBalance])>0",
                "name": "jsonRPC check [getAddressBalance] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "API check [/getAddressBalance] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[/getAddressBalance],{$ESCALATION.TIMEOUT})>0"
                    },
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "76ec68f8b7d547b59e9b74f4a71eb9cb",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressBalance],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getAddressBalance] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "2e8484a15f5e49239febe9fd072be0a2",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getAddressBalance],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getAddressBalance],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getAddressBalance] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getAddressBalance] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressBalance],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "df25151b2b014810af9dfae38319a99b",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getAddressInformation])>0",
                "name": "jsonRPC check [getAddressInformation] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getAddressInformation] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressInformation],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "f2eec3c6bbbd46588af0e81b024aebef",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressInformation],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getAddressInformation] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "2bf7cfad5df648c7b6976bbc32d89e74",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getAddressInformation],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getAddressInformation],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getAddressInformation] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getAddressInformation] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressInformation],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "cd5d91238a3b4439a0c5e70a693abff6",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getAddressState])>0",
                "name": "jsonRPC check [getAddressState] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getAddressState] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressState],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "444cfe82472d42b2b0a0dfc34e6418fb",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressState],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getAddressState] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "41651474e89f406fb24a09c12dac3e78",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getAddressState],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getAddressState],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getAddressState] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getAddressState] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getAddressState],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "1630f4dbe0b74c49a36d0491fb397fe1",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getBlockHeader])>0",
                "name": "jsonRPC check [getBlockHeader] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getBlockHeader] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getBlockHeader],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "b3a110d1ca8848a794c1d4bc8b2918cd",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getBlockHeader],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getBlockHeader] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "9e69b74d7dfa40dd8803b62cda0e90b4",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getBlockHeader],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getBlockHeader],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getBlockHeader] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getBlockHeader] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getBlockHeader],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "5bf7e5910dbf4789ab641285b9950b79",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getBlockTransactions])>0",
                "name": "jsonRPC check [getBlockTransactions] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getBlockTransactions] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getBlockTransactions],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "3c605526b9d245f09b40b10cd45455d3",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getBlockTransactions],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getBlockTransactions] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "d61e2b06fa0441be822cd289fed2c0c9",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getBlockTransactions],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getBlockTransactions],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getBlockTransactions] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getBlockTransactions] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getBlockTransactions],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "dcfb53a040024b7aa5fac7e70a212505",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getExtendedAddressInformation])>0",
                "name": "jsonRPC check [getExtendedAddressInformation] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getExtendedAddressInformation] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getExtendedAddressInformation],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "3320525a83e84ac48412edd9ef664be3",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getExtendedAddressInformation],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getExtendedAddressInformation] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "d523657e9c5e42e198398fabae3e811d",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getExtendedAddressInformation],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getExtendedAddressInformation],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getExtendedAddressInformation] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getExtendedAddressInformation] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getExtendedAddressInformation],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "a03a6715107942488b8abde0a80b212b",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getMasterchainInfo])>0",
                "name": "jsonRPC check [getMasterchainInfo] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getMasterchainInfo] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getMasterchainInfo],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "8522f721a70a4433aa77ae1ebea3b08d",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getMasterchainInfo],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getMasterchainInfo] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "514a7412651b481e910fc151982afa4a",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getMasterchainInfo],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getMasterchainInfo],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getMasterchainInfo] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getMasterchainInfo] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getMasterchainInfo],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "1739a05e96564da7b346cd8b1ce9c3c6",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getTransactions archival])>0",
                "name": "jsonRPC check [getTransactions archival] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getTransactions archival] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getTransactions archival],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "4e29e13758c644069f322ea9d7291d6e",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getTransactions archival],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getTransactions archival] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "a657e4fca72c4089baea1f19fae80a29",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getTransactions])>0",
                "name": "jsonRPC check [getTransactions] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getTransactions] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getTransactions],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "e2ef97ab7a4640e1bec9ff0fd1b15482",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getTransactions],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getTransactions] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "1ff60b46dbec4ab7a0b99260f85248cc",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getTransactions],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getTransactions],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getTransactions] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getTransactions] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getTransactions],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "fbcfeeb8faa04a8a86c48426e1b60e80",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC getWalletInformation])>0",
                "name": "jsonRPC check [getWalletInformation] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getWalletInformation] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getWalletInformation],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "cda18bc55d9a4c91afdf586171f2788b",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getWalletInformation],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [getWalletInformation] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "5abae86a9da94194b3fd139b76a708da",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC getWalletInformation],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC getWalletInformation],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [getWalletInformation] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [getWalletInformation] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC getWalletInformation],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "1aa4e9a9420645f4bcec1dedbcd870e8",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC lookupBlock])>0",
                "name": "jsonRPC check [lookupBlock] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [lookupBlock] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC lookupBlock],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "5084fe50d8de48218e37c8b840490155",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC lookupBlock],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [lookupBlock] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "cbdfd94f702c4b93b6a95a45ce26f5c9",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC lookupBlock],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC lookupBlock],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [lookupBlock] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [lookupBlock] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC lookupBlock],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "09894d0d71e4461cb374b169a8fd1d98",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC packAddress])>0",
                "name": "jsonRPC check [packAddress] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [packAddress] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC packAddress],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "3d1b82e7ec7e41629c8ceeaed3f7c9c1",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC packAddress],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [packAddress] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "c3e2dc2951484da8ab71d6eb45a7148b",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC packAddress],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC packAddress],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [packAddress] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [packAddress] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC packAddress],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "8c616ee2bb1a4a07aa18e05b37896cb4",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC runGetMethod])>0",
                "name": "jsonRPC check [runGetMethod] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [runGetMethod] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC runGetMethod],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "24d87113ead14f9bb829d6119d7a28a0",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC runGetMethod],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [runGetMethod] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "ae2d179761044e2782e7440dc9e0bda8",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC runGetMethod],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC runGetMethod],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [runGetMethod] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [runGetMethod] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC runGetMethod],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "420411fe0c4844609637fab08c33f22f",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC shards])>0",
                "name": "jsonRPC check [shards] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [shards] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC shards],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "d0101b1c5a5d4da2ab6ad406a00a4e60",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC shards],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [shards] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "0eeea430ae2643b9b683ffb12fd63246",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC shards],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC shards],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [shards] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [shards] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC shards],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "cb7fdcce94c14d9e88c81c37d49779a7",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC tryLocateResultTx])>0",
                "name": "jsonRPC check [tryLocateResultTx] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [tryLocateResultTx] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateResultTx],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "d4d4c9ff51e4402cb29a2495f4bb9f2a",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateResultTx],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [tryLocateResultTx] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "283724cec1cf4573a830f8b6ec7ec1f8",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC tryLocateResultTx],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC tryLocateResultTx],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [tryLocateResultTx] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [tryLocateResultTx] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateResultTx],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "c4e25411083444d6af0c72b77823061b",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC tryLocateSourceTx])>0",
                "name": "jsonRPC check [tryLocateSourceTx] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [tryLocateSourceTx] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateSourceTx],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "0e7431a8b57c40f89f21c02412617bd9",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateSourceTx],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [tryLocateSourceTx] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "65879140d46041d6964dc036b91dfc8b",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC tryLocateSourceTx],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC tryLocateSourceTx],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [tryLocateSourceTx] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [tryLocateSourceTx] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateSourceTx],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "17f42aa2ada34f9f969303d7b6257a02",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC tryLocateTx])>0",
                "name": "jsonRPC check [tryLocateTx] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [tryLocateTx] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateTx],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "ef3beb4704c04cf8a75b832a7a846b8a",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateTx],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [tryLocateTx] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "77895fe90cb34c669f63329ef835b754",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC tryLocateTx],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC tryLocateTx],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [tryLocateTx] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [tryLocateTx] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC tryLocateTx],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "2576c7cc781f48df9ff4c7a5172a6298",
                "expression": "last(/TON Service - http api/web.test.fail[jsonRPC unpackAddress])>0",
                "name": "jsonRPC check [unpackAddress] failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [unpackAddress] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC unpackAddress],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "22851f4c231446ef979ffe452780a5db",
                "expression": "min(/TON Service - http api/web.test.fail[jsonRPC unpackAddress],{$ESCALATION.TIMEOUT})>0",
                "name": "jsonRPC check [unpackAddress] failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "ac5164caacde474ea447ca512bc5f90a",
                "expression": "((count(/TON Service - http api/web.test.fail[jsonRPC unpackAddress],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - http api/web.test.fail[jsonRPC unpackAddress],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "jsonRPC check [unpackAddress] failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - http api/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "jsonRPC check [unpackAddress] failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - http api/web.test.fail[jsonRPC unpackAddress],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "fdcbc51fb743499086a838e46639ce75",
                "expression": "last(/TON Service - indexer/web.test.fail[/lookupMasterchainBlock])>0",
                "name": "lookupMasterchainBlock check failed",
                "priority": "WARNING",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "lookupMasterchainBlock check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/lookupMasterchainBlock],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            },
            {
                "uuid": "09e0010d5b0c4f2399a715f431336be9",
                "expression": "min(/TON Service - indexer/web.test.fail[/lookupMasterchainBlock],{$ESCALATION.TIMEOUT})>0",
                "name": "lookupMasterchainBlock check failed for {$ESCALATION.TIMEOUT}",
                "priority": "HIGH",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    }
                ]
            },
            {
                "uuid": "05f34b5a01af491888d66b54ea1c1c5d",
                "expression": "((count(/TON Service - indexer/web.test.fail[/lookupMasterchainBlock],{$FLAP.PERIOD},\"gt\",0) / count(/TON Service - indexer/web.test.fail[/lookupMasterchainBlock],{$FLAP.PERIOD})) * 100) > {$FLAP.PERCENTAGE}",
                "name": "lookupMasterchainBlock check  failure rate > {$FLAP.PERCENTAGE}% in {$FLAP.PERIOD}",
                "priority": "INFO",
                "dependencies": [
                    {
                        "name": "HTTPS service is down",
                        "expression": "max(/TON Service - indexer/net.tcp.service[https,{$HTTPS.CONN}],#3)=0"
                    },
                    {
                        "name": "lookupMasterchainBlock check failed for {$ESCALATION.TIMEOUT}",
                        "expression": "min(/TON Service - indexer/web.test.fail[/lookupMasterchainBlock],{$ESCALATION.TIMEOUT})>0"
                    }
                ]
            }
        ]
    }
}